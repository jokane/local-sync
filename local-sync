#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

use Config::YAML;
use Data::Dumper;

sub usage {
    print "local-sync [verb] [options] collection\n";
  print "Verbs:\n";
  print "   --get\n";
  print "   --put\n";
  print "   --diff\n";
  print "   --filediff [filename]\n";
  print "   --list-collections\n";
  print "Options:\n";
  print "   --delete\n";
  print "   --sub [directory]\n";
}

sub go {

    # Parse command line options.
    my $get = 0;
    my $put = 0;
    my $delete = 0;
    my $diff = 0;
    my $fileDiff;
    my $list;
    my $mode;
    my $extraOptions = "";
    my $subDir;
    my $yes;

    if(!GetOptions(
        'get!' => \$get,
        'put!' => \$put,
        'delete!' => \$delete,
        'yes!' => \$yes,
        'diff!' => \$diff,
        'filediff=s' => \$fileDiff,
        'list!' => \$list,
        'mode=s' => \$mode,
        'opts=s' => \$extraOptions,
        'subdirectory=s' => \$subDir
    )) {
        usage();
        exit 1;
    }

  # Read the configuration file, which should contain global options and 
  # collection definitions.
  my $config = Config::YAML->new(
    config => $ENV{'HOME'}. "/.local-sync/config"
  );

  # If we're listing collections, we can do that and stop early.
  if($list) {
    for my $collection (sort keys %{$config->{collections}}) {
      print "$collection\n";
    }
    exit 0;
  }

  # Get the global rsync options.
  my $globalOptions = $config->{"global-options"};
  $globalOptions = join(" ", @$globalOptions);

  # Figure out which collection we're dealing with.
    if($#ARGV != 0) {
      print STDERR "No collection name given.\n";
    usage();
    exit 1;
  }

  my $collectionName = $ARGV[0];
  my $collection = $config->{collections}{$collectionName};
  if(!defined $collection) {
      print STDERR "Unknown collection $collectionName.\n";
        usage();
        exit 1;
    }

  # Extract the source, destination, and (optionally) rsync options from the
  # config for this collection.
  my $here = $collection->{here};
  if(!defined $here) {
      print STDERR "Collection $collectionName missing 'here' attribute.\n";
        usage();
        exit 1;
    }
  $here =~ s/~/$ENV{'HOME'}/g;
    
  my $there = $collection->{there};
  if(!defined $there) {
      print STDERR "Collection $collectionName missing 'there' attribute.\n";
        usage();
        exit 1;
    }
  $there =~ s/~/$ENV{'HOME'}/g;

  my $collectionOptions = $collection->{options};
  if(defined $collectionOptions) {
    $collectionOptions = join(" ", @$collectionOptions);
  } else {
    $collectionOptions = "";
  }

  # If a specific mode was requested, get those options too.
  my $modeOptions = "";
  if(defined $mode) {
    $modeOptions = $config->{modes}{$mode};
    $modeOptions = join(" ", @$modeOptions);
  }

  # Append any requested subdirectory to the here and there.
    if(defined $subDir) {
        $here =~ s/\."?$/$subDir\/./;
        $there =~ s/\."?$/$subDir\/./;
    }

  # Build the complete options string.
  my $rsyncopts = join(" ",
    $extraOptions,
    $collectionOptions,
    $modeOptions,
    $globalOptions
  );

  # Summarize what we're going to do.
    print "local: $here\n";
    print "remote: $there\n";
  if(!$fileDiff) {
    print "rsync options:\n";
    print "  global: $globalOptions\n";
    print "  mode: $modeOptions\n";
    print "  collection: $collectionOptions\n";
    print "  command line: $extraOptions\n";
  }

    # Make sure the requested operations make sense.
    if($get && $put && $delete) {
        print STDERR "Refusing to delete in both directions.\n";
        usage();
        exit 1;
    }

    if($diff && ($get || $put)) {
        print STDERR "Cannot get/put and diff at the same time.\n";
        usage();
        exit 1;
    }

    if(!$get && !$put && !$diff && !$fileDiff) {
        print STDERR "Nothing to do.\n";
        usage();
        exit 1;
    }

  if($fileDiff && ($get || $put || $diff)) {
    print STDERR "Cannot combine filediff with other verbs.\n";
    usage();
    exit 1;
  }


    # Possibly find differences between the local and the remote.
    if($diff) {
        # Get file listings for both the local and remote sides. 

        # Vaporize any backup-dir that might be there, because it started causing
        # problems at some point.
        $rsyncopts =~ s/--backup-dir\s\S*//;

        # Some filters to apply to the output to minimize the number of "false
        # positives" for changes:
        my $filters = "";

        # Remove lines at top and bottom of output.
        $filters .= "|grep -v \"file list ...\"";
        $filters .= "|grep -v \"[0-9]* files ...\"";
        $filters .= "|grep -v \"bytes  received\"";
        $filters .= "|grep -v \"speedup is\"";
        $filters .= "|grep -v \"incremental file list\"";

        # Remove lines for the directories themselves, because they can show up
        # with different sizes.
        $filters .= "| grep -v \"^d\"";

        # Remove the file permissions, since sometimes we use FAT kinds of
        # filesystems that don't fully support them.  Other times we don't really
        # care about the permissions.
        $filters .= "| sed -e\"s/^..........//\" ";

        # Remove seconds.  Since FAT uses only 2-second resolution, these may not
        # match exactly.  Other times, minutes are quite good enough.
        $filters .= "| sed -e\"s/:[0-9][0-9] / /\" ";

        if(fork == 0) {
            # Child process.  Create the local listing, then exit.
            system("rsync $rsyncopts $here $filters > /tmp/local-sync-temp-local");
      print "Got local file list.\n";
            exit 1;
        } else {
            # Parent process.  Create the remote listing, then wait for the child
            # process to finish.
            system("rsync $rsyncopts $there $filters > /tmp/local-sync-temp-remote");
      print "Got remote file list.\n";
            wait;
        }

        # Show the differences between the files.
    if(!-e "/tmp/.local-sync-temp-local.swp") {
      system("nvim -d /tmp/local-sync-temp-local /tmp/local-sync-temp-remote");
    } else {
      print "File lists are already open.\n";
    }
    }

  # Possibly compare two individual files.
  if($fileDiff) {
    system("scp $here/$fileDiff /tmp/local-sync-filediff-local");
    system("scp $there/$fileDiff /tmp/local-sync-filediff-remote");
        # Show the differences between the files.
    if(!-e "/tmp/.local-sync-filediff-local.swp") {
      system("nvim -d /tmp/local-sync-filediff-local /tmp/local-sync-filediff-remote");
    } else {
      print "Compared files are already open.\n";
    }
  }

    # If we're deleting things, change the options to get this to happen.
    if($delete) {
        if(!$yes) { 
            if($get) {
                print "This will delete files from \n  $here\nthat do not exist on \n  $there\n";
            } else {
                print "This will delete files from \n  $there\nthat do not exist on \n  $here\n";
            }
            print "\nReally do this?";
            my $ans = <STDIN>;
            if($ans !~ /^y/) {
                print "Quitting.\n";
                exit 1;
            }
        }

        $rsyncopts .= " --delete ";
    }

    # Possibly get updates from the remote version to here.
    if($get) {
        my $cmd = "rsync $rsyncopts $there $here";
        #print "$cmd\n";
        if(0 != system $cmd) {
            print STDERR "Failed getting updates\n.";
            exit 1;
        }
    }

    # Possibly send updates from the local version to the remote.
    if($put) {
        my $cmd = "rsync $rsyncopts $here $there";
        #print "$cmd\n";
        if(0 != system $cmd) {
            print STDERR "Failed sending updates\n.";
            exit 1;
        }
    }    

}

go;


